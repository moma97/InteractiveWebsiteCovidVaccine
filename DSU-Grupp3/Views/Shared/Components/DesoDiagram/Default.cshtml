@model DSU_Grupp3.Models.DesoDiagramViewModel

<div>
    <canvas id="desoChart"></canvas>
</div>

<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>

<script>
    var desoNumberOfVaccinatedData = @Html.Raw(Json.Serialize(Model.DesoNumberOfVaccinated));
    var desoPopulationData = @Html.Raw(Json.Serialize(Model.DesoPopulation));
    var vaccinatedinCategories = @Html.Raw(Json.Serialize(Model.VaccinatedInCategories));
    var populationinCategories = @Html.Raw(Json.Serialize(Model.PopulationInCategories))
    var desoCategories = @Html.Raw(Json.Serialize(Model.DesoCategories));
    var desosNames = @Html.Raw(Json.Serialize(Model.DesosNames));
    var selectedDesosKeys = @Html.Raw(Json.Serialize(Model.SelectedDesos.Keys));
    var selectedDesosValues = @Html.Raw(Json.Serialize(Model.SelectedDesos.Values));
    var desoInformation = @Html.Raw(Json.Serialize(Model.DesoInformation));

</script>

<script>
 
    var desoChart;
    var compareChart;

    function CreateAndUpdateDesoChart() {
        var desoHeader = document.getElementById('desoHeader');
        var dropdown = document.getElementById('desoFilter');
        var resetBtn = document.getElementById('reset');

        desoHeader.innerHTML = "Antal vaccinerade utifrån områdeskategorier";
        dropdown.selectedIndex = -1;
        resetBtn.disabled = true;
        
        DestroyDesoChart();

        const deso = document.getElementById('desoChart').getContext('2d');

        desoChart = new Chart(deso, {
            type: 'bar',
            data: {
                labels: [
    @foreach (var desoCategories in Model.DesoCategories)
    {
        @Html.Raw($"'{desoCategories}',")
    }
                    ],
                datasets: [
                    {
                        backgroundColor: ['rgba(153, 102, 255, 0.6)', '#FFC2E0', '#BAF2D8'],
                        label: 'Antal Vaccinerade',
                        data: [

    @foreach (var vaccinatedPerCategory in Model.VaccinatedInCategories)
    {
        @Html.Raw($"'{vaccinatedPerCategory}',")
    }
                            ],
                        borderWidth: 1
                    }
                ]
            },
            options: {
                plugins: {
                    tooltip: {
                       callbacks: {
                           label: function (context) {
                               var label = context.label;
                               var value = context.raw;

                               if (context.datasetIndex === 0) {
                                   var vaccinatedPerCategory = vaccinatedinCategories[context.dataIndex];
                                   var desoPopulationPerCategory = populationinCategories[context.dataIndex];
                                   var percentage = (vaccinatedPerCategory / desoPopulationPerCategory) * 100;

                                   return 'Antal Vaccinerade: ' + value + ' (' + Math.round(percentage) + '%)';
                               }
                           }
                       }
                    },
                    legend: {
                        display: false
                    }
                },
                onHover: (event, chartElements) => {
                    const target = event.native.target;
                    if (chartElements.length > 0) {
                        target.style.cursor = 'pointer';
                    }
                    else {
                        target.style.cursor = 'default';
                    }
                },
                scales: {
                    y: {
                        display: true,
                        beginAtZero: true,
                        grid: {
                            display: false,

                        },
                        ticks: {
                            font: {
                                size: 13,
                                weight: 'bold'
                            },
                            color: '#3b3b3b'
                        }
                    },
                    x: {
                        display: true,
                        grid: {
                            display: false,
                        },
                        title: {
                            display: true,
                            color: '#000000',
                            font: {
                                size: 14,
                            },
                            padding: { top: 20, left: 0, right: 0, bottom: 0 }
                        },
                        ticks: {
                            font: {
                                size: 11,
                                weight: 'bold'
                            },
                            color: '#3b3b3b'
                        }
                    }
                },
                onClick: function (event, elements) {
                    var textDeso = document.getElementById('click-text-deso');
                    textDeso.textContent = 'ⓘ Tryck på ett DeSO för att se mer detaljerad statistik';
                    var desoHeader = document.getElementById('desoHeader');
                    var resetBtn = document.getElementById('reset');
                    resetBtn.disabled = false;
                    var clickedIndex = elements[0].index;
                    var clickedDesoCategory = this.data.labels[clickedIndex];
                    var clickedValue = this.data.datasets[0].data[clickedIndex];
                    var clickedArrayValue = [clickedValue];
                    var clickedArrayDesoCategory = [clickedDesoCategory];
                    var newData;
                    var newLabels;
                    var newColor;
                    var desoData = {
                        "A: Glesbygd": {
                            labels: [@foreach (var deso in Model.DesoRegionA.Keys)
        @Html.Raw($"'{deso}',")
 ],
                            data: [@foreach (var deso in Model.DesoRegionA.Values)
        @Html.Raw($"'{deso}',")
],
                            backgroundColor: 'rgba(153, 102, 255, 0.6)',
                        },
                       
                        "B: Tätort": {
                            labels: [@foreach (var deso in Model.DesoRegionB.Keys)
        @Html.Raw($"'{deso}',")
],
                            data: [@foreach (var deso in Model.DesoRegionB.Values)
        @Html.Raw($"'{deso}',")
],
                            backgroundColor: '#FFC2E0',
                        },
                      
                        "C: Centralort": {
                            labels: [@foreach (var deso in Model.DesoRegionC.Keys)
        @Html.Raw($"'{deso}',")
 ],
                            data: [@foreach (var deso in Model.DesoRegionC.Values)
        @Html.Raw($"'{deso}',")
],
                            backgroundColor: '#BAF2D8',
                        },
                        
                    };
                    
                    if (desoData.hasOwnProperty(clickedDesoCategory)) {
                        desoHeader.innerHTML = `Antal vaccinerade per DeSO i ${clickedDesoCategory}`;
                        newData = desoData[clickedDesoCategory].data;
                        newLabels = desoData[clickedDesoCategory].labels;
                        newColor = desoData[clickedDesoCategory].backgroundColor;
                        this.data.datasets[0].data = newData;
                        this.data.labels = newLabels;
                        this.data.datasets[0].data.forEach((_, index) => {
                            this.data.datasets[0].backgroundColor[index] = newColor;
                        });
                        this.data.datasets[0].data = newData;
                        this.data.labels = newLabels;
                    }

                   else if (desoData.hasOwnProperty(clickedDesoCategory)== false)
                    {
                        
                        var newArrayData=[];
                        var newArrayLabels=[];
                       
                        FindClickedDeso(newArrayData, newArrayLabels, clickedArrayValue, clickedArrayDesoCategory);
                        if (newArrayData.length >= 1) 
                        {
                        desoHeader.innerHTML = clickedDesoCategory;
                        this.data.datasets[0].data = newArrayData;
                        this.data.labels = newArrayLabels;

                        }
                    }


                    this.options.plugins.tooltip.callbacks.label = function (context){
                        var desoName = context.label;
                        var vaccinatedPerDeso = context.raw;
                        var population = [];

                        if (context.datasetIndex === 0) {
                            for (var i = 0; i < desoInformation.areas.length; i++) {
                                if (desoName == desoInformation.areas[i].desoName) {
                                    population.push(desoInformation.areas[i].totalPopulation);
                                }
                            }
                            if (population.length > 0) {
                                var percentage = (vaccinatedPerDeso / population[0]) * 100;
                                return 'Antal Vaccinerade: ' + vaccinatedPerDeso + ' (' + Math.round(percentage) + '%)';
                            } else {
                                return '';

                            }
                        }
                    }

                    this.update();
                }
            }
        });
        var textDeso = document.getElementById('click-text-deso');
        textDeso.textContent = 'ⓘ Tryck på en områdeskategori för att se mer detaljerad statistik';
        textDeso.style.display = 'block';
    }

    /// Gets the Vaccinatedpopulation and matches it with Clicked value and ands to l
    function FindClickedDeso(newArrayData, newArrayLabels, clickedArrayValue, clickedArrayDesoCategory) {
        var textDeso = document.getElementById('click-text-deso');
        textDeso.style.display = 'none';
  
        newData123 = [@foreach (var selectedDeso in Model.VaccinatedPopulationInDeSo)
            @Html.Raw($"'{selectedDeso}',")];

        for (var deSo of newData123) {
            
            var matches = deSo.match(/\[(.*?), \((\d+), (\d+), (\d+), (\d+)\)\]/);
           
            if (matches[1]== clickedArrayDesoCategory[0]) 
            {
                
                var vaccinatedMen = matches[3];
                var vaccinatedFemale = matches[4];
                var totalPopulation = matches[2];
                var totalVaccinations = clickedArrayValue[0];
                var vaccinatedOtherGender = matches[5];

                newArrayData[0] = totalPopulation;
                newArrayData[1] = totalVaccinations; 
                newArrayData[2] = vaccinatedMen;
                newArrayData[3] = vaccinatedFemale;
                newArrayData[4] = vaccinatedOtherGender;
                newArrayLabels[0] = "Total befolkning (" + totalPopulation + ")";
                newArrayLabels[1] = "Antal vaccinerade (" + totalVaccinations + ")";
                newArrayLabels[2] = "Vaccinerade män (" + vaccinatedMen + ")";
                newArrayLabels[3] = "Vaccinerade kvinnor (" + vaccinatedFemale + ")";
                newArrayLabels[4] = "Icke Binär (" + vaccinatedOtherGender + ")";
                    
            }
 
        }
     
    }

    function CreateCompareChart(selectedDesoNames, selectedDesos) {
        var desoHeader = document.getElementById('desoHeader');
        const deso = document.getElementById('desoChart').getContext('2d');
        desoHeader.innerHTML = `Antal vaccinerade i valda DeSO`;
        var textDeso = document.getElementById('click-text-deso');
        textDeso.textContent = 'ⓘ Tryck på ett DeSO för att se mer detaljerad statistik';

        desoChart = new Chart(deso, {
            type: 'bar',
            data: {
                labels: selectedDesoNames,
                datasets: [
                    {
                        backgroundColor: ['#7BBBF7'],
                        label: 'Antal Vaccinerade',
                        data: selectedDesos,
                        borderWidth: 1
                    }
                ]
            },
            options: {
                plugins: {
                    legend: {
                        display: false
                    },
                    tooltip: {
                        callbacks: {
                            label: function (context) {
                                var desoName = context.label;
                                var vaccinatedPerDeso = context.raw;
                                var population = [];
                               
                                if (context.datasetIndex === 0) {
                                    for (var i = 0; i < desoInformation.areas.length; i++){
                                        if (desoName == desoInformation.areas[i].desoName){
                                            population.push(desoInformation.areas[i].totalPopulation);
                                        }
                                    }
                                    var percentage = (vaccinatedPerDeso / population) * 100;

                                    return 'Antal Vaccinerade: ' + vaccinatedPerDeso + ' (' + Math.round(percentage) + '%)';
                                }
                            }
                        }
                    }
                },
                onHover: (event, chartElements) => {
                    const target = event.native.target;
                    if (chartElements.length > 0) {
                        target.style.cursor = 'pointer';
                    }
                    else {
                        target.style.cursor = 'default';
                    }
                },
                scales: {
                    y: {
                        display: true,
                        beginAtZero: true,
                        grid: {
                            display: false,

                        },
                        ticks: {
                            font: {
                                size: 13,
                                weight: 'bold'
                            },
                            color: '#3b3b3b'
                        }
                    },
                    x: {
                        display: true,
                        grid: {
                            display: false,
                        },
                        title: {
                            display: true,
                            color: '#000000',
                            font: {
                                size: 14,
                            },
                            padding: { top: 20, left: 0, right: 0, bottom: 0 }
                        },
                        ticks: {
                            font: {
                                size: 11,
                                weight: 'bold'
                            },
                            color: '#3b3b3b'
                        }
                    }
                },
                onClick: function (event, elements) {
                    var clickedIndex = elements[0].index;
                    var clickedDesoCategory = this.data.labels[clickedIndex];
                    var clickedValue = this.data.datasets[0].data[clickedIndex];
                    var clickedArrayValue = [clickedValue];
                    var clickedArrayDesoCategory = [clickedDesoCategory];
                    var newArrayData = [];
                    var newArrayLabels = [];

                    FindClickedDeso(newArrayData, newArrayLabels, clickedArrayValue, clickedArrayDesoCategory);
                    if (newArrayData.length >= 1) {
                        desoHeader.innerHTML = clickedDesoCategory;
                        this.data.datasets[0].data = newArrayData;
                        this.data.labels = newArrayLabels;
                    }
                    this.options.plugins.tooltip.callbacks.label = function (context) {
                        var desoName = context.label;
                        var vaccinatedPerDeso = context.raw;
                        var population = [];

                        if (context.datasetIndex === 0) {
                            for (var i = 0; i < desoInformation.areas.length; i++) {
                                if (desoName == desoInformation.areas[i].desoName) {
                                    population.push(desoInformation.areas[i].totalPopulation);
                                }
                            }
                            if (population.length > 0) {
                                var percentage = (vaccinatedPerDeso / population[0]) * 100;
                                return 'Antal Vaccinerade: ' + vaccinatedPerDeso + ' (' + Math.round(percentage) + '%)';
                            } else {
                                return '';

                            }
                        }
                    }
                    this.update();
                }
            }
        });
    }

    function CompareDesos() {

        var resetBtn = document.getElementById("reset");
        resetBtn.disabled = false;

        DestroyDesoChart();

        var dropdown = document.getElementById("desoFilter");
        var selectedDesoNames = [];
        var selectedDesos = [];
        for (var i = 0; i < dropdown.options.length; i++) {
            if (dropdown.options[i].selected) {
                selectedDesoNames.push(dropdown.options[i].value);
            }
        }
        
        for (var i = 0; i < selectedDesosKeys.length; i++) {
            for (var index = 0; index < selectedDesoNames.length; index++) {
                if (selectedDesosKeys[i] == selectedDesoNames[index]) {
                    selectedDesos.push(selectedDesosValues[i])
                }
            }
        }

        CreateCompareChart(selectedDesoNames, selectedDesos);
    }

    function DestroyDesoChart() {
        if (desoChart) {
            desoChart.destroy();
        }
    }
 
    CreateAndUpdateDesoChart();
</script>
